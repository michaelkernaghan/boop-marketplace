{"ast":null,"code":"'use strict';\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n *  BigNumber\n *\n *  A wrapper around the BN.js object. We use the BN.js library\n *  because it is used by elliptic, so it is required regardles.\n *\n */\nvar bn_js_1 = __importDefault(require(\"bn.js\"));\nvar bytes_1 = require(\"./bytes\");\nvar properties_1 = require(\"./properties\");\nvar errors = __importStar(require(\"../errors\"));\nvar BN_1 = new bn_js_1.default.BN(-1);\nfunction toHex(bn) {\n  var value = bn.toString(16);\n  if (value[0] === '-') {\n    if (value.length % 2 === 0) {\n      return '-0x0' + value.substring(1);\n    }\n    return \"-0x\" + value.substring(1);\n  }\n  if (value.length % 2 === 1) {\n    return '0x0' + value;\n  }\n  return '0x' + value;\n}\nfunction toBN(value) {\n  return _bnify(bigNumberify(value));\n}\nfunction toBigNumber(bn) {\n  return new BigNumber(toHex(bn));\n}\nfunction _bnify(value) {\n  var hex = value._hex;\n  if (hex[0] === '-') {\n    return new bn_js_1.default.BN(hex.substring(3), 16).mul(BN_1);\n  }\n  return new bn_js_1.default.BN(hex.substring(2), 16);\n}\nvar BigNumber = /** @class */function () {\n  function BigNumber(value) {\n    errors.checkNew(this, BigNumber);\n    properties_1.setType(this, 'BigNumber');\n    if (typeof value === 'string') {\n      if (bytes_1.isHexString(value)) {\n        if (value == '0x') {\n          value = '0x0';\n        }\n        properties_1.defineReadOnly(this, '_hex', value);\n      } else if (value[0] === '-' && bytes_1.isHexString(value.substring(1))) {\n        properties_1.defineReadOnly(this, '_hex', value);\n      } else if (value.match(/^-?[0-9]*$/)) {\n        if (value == '') {\n          value = '0';\n        }\n        properties_1.defineReadOnly(this, '_hex', toHex(new bn_js_1.default.BN(value)));\n      } else {\n        errors.throwError('invalid BigNumber string value', errors.INVALID_ARGUMENT, {\n          arg: 'value',\n          value: value\n        });\n      }\n    } else if (typeof value === 'number') {\n      if (parseInt(String(value)) !== value) {\n        errors.throwError('underflow', errors.NUMERIC_FAULT, {\n          operation: 'setValue',\n          fault: 'underflow',\n          value: value,\n          outputValue: parseInt(String(value))\n        });\n      }\n      try {\n        properties_1.defineReadOnly(this, '_hex', toHex(new bn_js_1.default.BN(value)));\n      } catch (error) {\n        errors.throwError('overflow', errors.NUMERIC_FAULT, {\n          operation: 'setValue',\n          fault: 'overflow',\n          details: error.message\n        });\n      }\n    } else if (value instanceof BigNumber) {\n      properties_1.defineReadOnly(this, '_hex', value._hex);\n    } else if (value.toHexString) {\n      properties_1.defineReadOnly(this, '_hex', toHex(toBN(value.toHexString())));\n    } else if (value._hex && bytes_1.isHexString(value._hex)) {\n      properties_1.defineReadOnly(this, '_hex', value._hex);\n    } else if (bytes_1.isArrayish(value)) {\n      properties_1.defineReadOnly(this, '_hex', toHex(new bn_js_1.default.BN(bytes_1.hexlify(value).substring(2), 16)));\n    } else {\n      errors.throwError('invalid BigNumber value', errors.INVALID_ARGUMENT, {\n        arg: 'value',\n        value: value\n      });\n    }\n  }\n  BigNumber.prototype.fromTwos = function (value) {\n    return toBigNumber(_bnify(this).fromTwos(value));\n  };\n  BigNumber.prototype.toTwos = function (value) {\n    return toBigNumber(_bnify(this).toTwos(value));\n  };\n  BigNumber.prototype.abs = function () {\n    if (this._hex[0] === '-') {\n      return toBigNumber(_bnify(this).mul(BN_1));\n    }\n    return this;\n  };\n  BigNumber.prototype.add = function (other) {\n    return toBigNumber(_bnify(this).add(toBN(other)));\n  };\n  BigNumber.prototype.sub = function (other) {\n    return toBigNumber(_bnify(this).sub(toBN(other)));\n  };\n  BigNumber.prototype.div = function (other) {\n    var o = bigNumberify(other);\n    if (o.isZero()) {\n      errors.throwError('division by zero', errors.NUMERIC_FAULT, {\n        operation: 'divide',\n        fault: 'division by zero'\n      });\n    }\n    return toBigNumber(_bnify(this).div(toBN(other)));\n  };\n  BigNumber.prototype.mul = function (other) {\n    return toBigNumber(_bnify(this).mul(toBN(other)));\n  };\n  BigNumber.prototype.mod = function (other) {\n    return toBigNumber(_bnify(this).mod(toBN(other)));\n  };\n  BigNumber.prototype.pow = function (other) {\n    return toBigNumber(_bnify(this).pow(toBN(other)));\n  };\n  BigNumber.prototype.maskn = function (value) {\n    return toBigNumber(_bnify(this).maskn(value));\n  };\n  BigNumber.prototype.eq = function (other) {\n    return _bnify(this).eq(toBN(other));\n  };\n  BigNumber.prototype.lt = function (other) {\n    return _bnify(this).lt(toBN(other));\n  };\n  BigNumber.prototype.lte = function (other) {\n    return _bnify(this).lte(toBN(other));\n  };\n  BigNumber.prototype.gt = function (other) {\n    return _bnify(this).gt(toBN(other));\n  };\n  BigNumber.prototype.gte = function (other) {\n    return _bnify(this).gte(toBN(other));\n  };\n  BigNumber.prototype.isZero = function () {\n    return _bnify(this).isZero();\n  };\n  BigNumber.prototype.toNumber = function () {\n    try {\n      return _bnify(this).toNumber();\n    } catch (error) {\n      errors.throwError('overflow', errors.NUMERIC_FAULT, {\n        operation: 'setValue',\n        fault: 'overflow',\n        details: error.message\n      });\n    }\n    return null;\n  };\n  BigNumber.prototype.toString = function () {\n    return _bnify(this).toString(10);\n  };\n  BigNumber.prototype.toHexString = function () {\n    return this._hex;\n  };\n  BigNumber.isBigNumber = function (value) {\n    return properties_1.isType(value, 'BigNumber');\n  };\n  return BigNumber;\n}();\nexports.BigNumber = BigNumber;\nfunction bigNumberify(value) {\n  if (BigNumber.isBigNumber(value)) {\n    return value;\n  }\n  return new BigNumber(value);\n}\nexports.bigNumberify = bigNumberify;","map":null,"metadata":{},"sourceType":"script"}